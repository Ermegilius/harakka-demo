name: Deploy Supabase Migrations

# Trigger only when PRs are merged into develop branch
on:
  push:
    branches: [develop]
    paths:
      - 'supabase/migrations/**'
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy-migrations:
    name: Deploy Database Migrations to Production
    runs-on: ubuntu-latest
    
    # Only run if this is a merge commit (not direct push)
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.message, 'Merge pull request'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for diff comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Supabase CLI
        run: |
          npm install -g supabase@latest
          echo "Supabase CLI version:"
          supabase --version

      - name: Verify required secrets
        run: |
          if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
            echo "‚ùå SUPABASE_ACCESS_TOKEN secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_PROJECT_ID }}" ]; then
            echo "‚ùå PRODUCTION_PROJECT_ID secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_DB_PASSWORD }}" ]; then
            echo "‚ùå PRODUCTION_DB_PASSWORD secret is missing"
            exit 1
          fi
          echo "‚úÖ All required secrets are available"

      - name: Check for migration changes
        id: check_changes
        run: |
          echo "Checking for new migration files..."
          
          # Get the previous commit (before this merge)
          PREV_COMMIT=$(git rev-parse HEAD~1)
          
          # Check if any migration files have changed
          CHANGED_MIGRATIONS=$(git diff --name-only $PREV_COMMIT HEAD -- supabase/migrations/ || echo "")
          
          if [ -z "$CHANGED_MIGRATIONS" ]; then
            echo "No migration file changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Migration file changes detected:"
            echo "$CHANGED_MIGRATIONS"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_MIGRATIONS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Skip deployment if no changes
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "üîÑ No migration changes detected - skipping deployment"
          echo "This is expected behavior when migrations haven't changed"

      - name: Authenticate with Supabase
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "üîê Authenticating with Supabase..."
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Link to production project
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "üîó Linking to production project..."
          supabase link --project-ref ${{ secrets.PRODUCTION_PROJECT_ID }} --password ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Validate migrations
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "üîç Validating migration files..."
          
          # Check if migration files exist and are readable
          if [ ! -d "supabase/migrations" ]; then
            echo "‚ùå Migration directory not found"
            exit 1
          fi
          
          # List all migration files to validate structure
          echo "Current migration files:"
          ls -la supabase/migrations/
          
          # Check for basic SQL syntax in new migration files
          echo "Validating SQL syntax in changed files:"
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Checking: $file"
              # Basic validation - check if file is readable and not empty
              if [ ! -s "$file" ]; then
                echo "‚ö†Ô∏è  Warning: $file is empty"
              else
                echo "‚úÖ $file appears valid"
              fi
            fi
          done <<< "${{ steps.check_changes.outputs.changed_files }}"

      - name: Deploy migrations to production
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "üöÄ Deploying migrations to production..."
          
          # Push database migrations to production
          supabase db push --password ${{ secrets.PRODUCTION_DB_PASSWORD }}
          
          echo "‚úÖ Migrations deployed successfully!"

      - name: Verify deployment
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "üîç Verifying deployment..."
          
          # Get current migration status
          echo "Current migration status:"
          supabase migration list --password ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Report deployment summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "üìä Deployment Summary:"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Changed migration files:"
          echo "${{ steps.check_changes.outputs.changed_files }}"
          echo ""
          echo "üéâ Migration deployment completed successfully!"

      - name: Handle deployment failure
        if: failure() && steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "‚ùå Migration deployment failed!"
          echo "Please check the logs above for details."
          echo "Common issues:"
          echo "1. Migration syntax errors"
          echo "2. Database connection issues"
          echo "3. Permission problems"
          echo "4. Migration conflicts"
          echo ""
          echo "Manual intervention may be required."
          exit 1

  # Optional: Add a notification job for deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-migrations
    if: always()
    steps:
      - name: Deployment Success
        if: needs.deploy-migrations.result == 'success'
        run: |
          echo "‚úÖ Supabase migration deployment completed successfully!"
          echo "All database changes have been applied to production."

      - name: Deployment Failure
        if: needs.deploy-migrations.result == 'failure'
        run: |
          echo "‚ùå Supabase migration deployment failed!"
          echo "Please review the workflow logs and take appropriate action."
          # Here you could add Slack/Discord notifications, email alerts, etc.
